<template>
  <div class="modern-dashboard">
    <!-- È°µÈù¢Ê†áÈ¢òÂíåÊó∂Èó¥ËåÉÂõ¥ÈÄâÊã© -->
    <div class="page-header">
      <div class="header-content">
        <div class="header-left">
          <h1 class="page-title">
            <el-icon class="title-icon"><DataBoard /></el-icon>
            Â∑•‰ΩúÂè∞
          </h1>
          <div class="welcome-message">
            <p class="welcome-line">
              <span class="greeting-section">
                <span class="greeting-emoji">{{ getGreeting().split(' ')[1] || 'üëã' }}</span>
                <span class="greeting-words">{{ getGreeting().split(' ')[0] }}Ôºå</span>
                <span class="user-name">{{ getCurrentUser() }}</span>
                <span class="exclamation">ÔºÅ</span>
              </span>
              <span class="date-section">
                <el-icon class="calendar-icon"><Calendar /></el-icon>
                ‰ªäÂ§©ÊòØ {{ getCurrentDate() }}
                <el-tag size="small" type="primary" class="weekday-tag">
                  {{ getCurrentWeekday() }}
                </el-tag>
              </span>
            </p>
          </div>
        </div>
        <div class="header-right">
          <div class="time-filter">
            <span class="filter-label">Êó∂Èó¥ËåÉÂõ¥Ôºö</span>
            <el-select v-model="selectedTimeRange" @change="handleTimeRangeChange" class="time-select">
              <el-option label="‰ªäÂ§©" value="today" />
              <el-option label="Êú¨Âë®" value="week" />
              <el-option label="Êú¨Êúà" value="month" />
              <el-option label="Êú¨Â≠£Â∫¶" value="quarter" />
              <el-option label="Êú¨Âπ¥" value="year" />
            </el-select>
          </div>
          <div class="quick-actions">
            <el-button type="primary" @click="createNewPlan" class="action-btn">
              <el-icon><Plus /></el-icon>
              Êñ∞Âª∫ËÆ°Âàí
            </el-button>
            <el-button @click="refreshData" class="action-btn">
              <el-icon><Refresh /></el-icon>
              Âà∑Êñ∞
            </el-button>
          </div>
        </div>
      </div>
    </div>

    <!-- È°∂ÈÉ®ÁªüËÆ°Êï∞ÊçÆÂ±ïÁ§∫Ë°å -->
    <div class="stats-row">
      <el-row :gutter="20">
        <!-- Á¨¨‰∏ÄÂàóÔºöÂåÖÂê´ÂéüÊù•ÁöÑ1„ÄÅ2„ÄÅ3ÂàóÂíåÊñ∞Â¢ûÁöÑÈÄöÁü•ÂÖ¨ÂëäÊ®°Âùó -->
        <el-col :span="18">
          <!-- ‰∏äÈÉ®ÂàÜÔºöÂéüÊù•ÁöÑ1„ÄÅ2„ÄÅ3Âàó -->
          <div class="upper-section">
            <el-row :gutter="20">
              <!-- ÂéüÁ¨¨‰∏ÄÂàóÔºöÂÆåÊàêÊÉÖÂÜµ -->
              <el-col :span="8">
                <div class="stat-card left-card">
                  <div class="completion-grid">
                    <div class="completion-item">
                      <span class="completion-label">ÊÄª‰ΩìÂÆåÊàêÁéá</span>
                      <div class="completion-progress">
                        <el-progress :percentage="overallProgress" :stroke-width="12" :show-text="false" color="#409eff" />
                        <span class="progress-text progress-text-blue">{{ overallProgress }}%</span>
                      </div>
                    </div>
                    <div class="completion-item">
                      <span class="completion-label">Âπ≥ÂùáËøõÂ∫¶</span>
                      <div class="completion-progress">
                        <el-progress :percentage="dashboardData.planStats?.avgProgress || 0" :stroke-width="12" :show-text="false" color="#67c23a" />
                        <span class="progress-text progress-text-green">{{ (dashboardData.planStats?.avgProgress || 0).toFixed(1) }}%</span>
                      </div>
                    </div>
                    <div class="completion-item">
                      <span class="completion-label">Êú¨Âë®ÂÆåÊàêÁéá</span>
                      <div class="completion-progress">
                        <el-progress :percentage="weeklyTargetRate" :stroke-width="12" :show-text="false" color="#e6a23c" />
                        <span class="progress-text progress-text-orange">{{ weeklyTargetRate }}%</span>
                      </div>
                    </div>
                    <div class="completion-item">
                      <span class="completion-label">‰ªªÂä°ÊïàÁéá</span>
                      <div class="completion-progress">
                        <el-progress :percentage="85" :stroke-width="12" :show-text="false" color="#f56c6c" />
                        <span class="progress-text progress-text-red">85%</span>
                      </div>
                    </div>
                  </div>
                </div>
              </el-col>

              <!-- ÂéüÁ¨¨‰∫åÂàóÔºöËÆ°ÂàíÁªüËÆ°ÂíåÊü±ÂΩ¢Âõæ -->
              <el-col :span="8">
                <div class="stat-card middle-card">
                  <div class="middle-content">
                    <!-- ‰∏äÈÉ®ÔºöÁªüËÆ°Ê†áÁ≠æ -->
                    <el-row :gutter="32" justify="center" align="middle" class="stats-tags">
                      <el-col :span="12" class="text-center">
                        <span class="stat-tag stat-tag-total">ÊÄªËÆ°Âàí</span>
                        <span class="stat-tag-value">{{ dashboardData.planStats?.totalPlans || 0 }}È°π</span>
                      </el-col>
                      <el-col :span="12" class="text-center">
                        <span class="stat-tag stat-tag-completed">Â∑≤ÂÆåÊàê</span>
                        <span class="stat-tag-value">{{ dashboardData.planStats?.completedPlans || 0 }}È°π</span>
                      </el-col>
                    </el-row>
                    <!-- ‰∏ãÈÉ®ÔºöEChartsÊü±ÂΩ¢Âõæ -->
                    <div class="bar-chart">
                      <div ref="barChartRef" class="echarts-container"></div>
                    </div>
                  </div>
                </div>
              </el-col>

              <!-- ÂéüÁ¨¨‰∏âÂàóÔºöÂúÜÁéØÂõæ -->
              <el-col :span="8">
                <div class="stat-card right-card">
                  <div class="pie-charts">
                    <div class="pie-item">
                      <el-progress
                        type="circle"
                        :percentage="getPercentage('inProgress')"
                        :width="80"
                        :stroke-width="12"
                        color="#409eff"
                      >
                        <template #default="{ percentage }">
                          <div class="pie-center">
                            <div class="pie-value">{{ percentage }}%</div>
                          </div>
                        </template>
                      </el-progress>
                      <div class="pie-label">ËøõË°å‰∏≠</div>
                    </div>
                    <div class="pie-item">
                      <el-progress
                        type="circle"
                        :percentage="getPercentage('completed')"
                        :width="80"
                        :stroke-width="12"
                        color="#67c23a"
                      >
                        <template #default="{ percentage }">
                          <div class="pie-center">
                            <div class="pie-value">{{ percentage }}%</div>
                          </div>
                        </template>
                      </el-progress>
                      <div class="pie-label">Â∑≤ÂÆåÊàê</div>
                    </div>
                    <div class="pie-item">
                      <el-progress
                        type="circle"
                        :percentage="getPercentage('overdue')"
                        :width="80"
                        :stroke-width="12"
                        color="#f56c6c"
                      >
                        <template #default="{ percentage }">
                          <div class="pie-center">
                            <div class="pie-value">{{ percentage }}%</div>
                          </div>
                        </template>
                      </el-progress>
                      <div class="pie-label">Â∑≤ÈÄæÊúü</div>
                    </div>
                  </div>
                </div>
              </el-col>
            </el-row>
          </div>

          <!-- ‰∏ãÈÉ®ÂàÜÔºöÊñ∞Â¢ûÁöÑÈÄöÁü•ÂÖ¨ÂëäÊ®°Âùó -->
          <div class="lower-section">
            <div class="stat-card notice-card">
              <el-row :gutter="8">
                <!-- Â∑¶‰æßÊ†áÈ¢òÂå∫Âüü -->
                <el-col :span="6">
                  <div class="notice-header">
                    <h3 class="notice-title">
                      <el-icon><Bell /></el-icon>
                      <span>ÈÄöÁü•ÂÖ¨Âëä</span>
                    </h3>
                  </div>
                </el-col>
                <!-- Âè≥‰æßÊªöÂä®ÊòæÁ§∫Âå∫Âüü -->
                <el-col :span="18">
                  <div class="notice-content">
                    <div class="notice-scroll" ref="noticeScrollRef">
                      <div class="notice-item" v-for="(notice, index) in noticeList" :key="index">
                        <div class="notice-dot"></div>
                        <div class="notice-text">{{ notice.content }}</div>
                        <div class="notice-time">{{ notice.time }}</div>
                      </div>
                    </div>
                  </div>
                </el-col>
              </el-row>
            </div>
          </div>
        </el-col>

        <!-- Á¨¨‰∫åÂàóÔºöÊó•ÂéÜÁªÑ‰ª∂ÔºàÂéüÁ¨¨ÂõõÂàóÔºâ -->
        <el-col :span="6">
          <div class="stat-card calendar-card">
            <div class="calendar-content">
              <el-calendar v-model="currentDate" class="dashboard-calendar">
                <template #date-cell="{ data }">
                  <div class="calendar-day" :class="{ 'is-today': isToday(data.day) }">
                    {{ data.day.split('-').pop() }}
                  </div>
                </template>
              </el-calendar>
            </div>
          </div>
        </el-col>
      </el-row>
    </div>

    <!-- ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü -->
    <div class="main-content">
      <div class="content-grid">
        <!-- ÂæÖÂäû‰∫ãÈ°π -->
        <div class="content-section todo-section">
          <div class="section-header">
            <h3 class="section-title">
              <el-icon><Clock /></el-icon>
              ÂæÖÂäû‰∫ãÈ°π
              <el-badge :value="todoList.length" class="todo-badge" />
            </h3>
            <div class="section-actions">
              <el-button text @click="viewAllTodos" class="view-all-btn">
                Êü•ÁúãÂÖ®ÈÉ®
                <el-icon class="el-icon--right"><ArrowRight /></el-icon>
              </el-button>
            </div>
          </div>
          <div class="todo-container">
            <div v-if="loading.todos" class="loading-state">
              <el-skeleton :rows="3" animated />
            </div>
            <div v-else-if="todoList.length === 0" class="empty-state">
              <el-empty description="ÊöÇÊó†ÂæÖÂäû‰∫ãÈ°π">
                <el-button type="primary" @click="createNewPlan">ÂàõÂª∫Êñ∞ËÆ°Âàí</el-button>
              </el-empty>
            </div>
            <div v-else class="todo-list">
              <div
                v-for="todo in todoList.slice(0, 6)"
                :key="todo.ID"
                class="todo-item"
                @click="viewPlanDetail(todo.ID)"
              >
                <div class="todo-priority" :class="`priority-${todo.Priority}`"></div>
                <div class="todo-main">
                  <div class="todo-header">
                    <h4 class="todo-title">{{ todo.Title }}</h4>
                    <el-tag :type="getUrgencyType(todo.DaysRemaining)" size="small" class="urgency-tag">
                      {{ formatUrgency(todo.DaysRemaining) }}
                    </el-tag>
                  </div>
                  <div class="todo-meta">
                    <span class="todo-type">
                      <el-icon><Folder /></el-icon>
                      {{ todo.WorkTypeName }}
                    </span>
                    <span class="todo-deadline">
                      <el-icon><Calendar /></el-icon>
                      {{ formatDate(todo.EndDate) }}
                    </span>
                  </div>
                  <div class="todo-progress">
                    <el-progress
                      :percentage="todo.Progress"
                      :stroke-width="4"
                      :show-text="false"
                      :color="getProgressColorGradient(todo.Progress)"
                    />
                    <span class="progress-text">{{ todo.Progress }}%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- ÊúÄËøëÂä®ÊÄÅ -->
        <div class="content-section activity-section">
          <div class="section-header">
            <h3 class="section-title">
              <el-icon><Bell /></el-icon>
              ÊúÄËøëÂä®ÊÄÅ
            </h3>
            <div class="section-actions">
              <el-button text @click="viewAllLogs" class="view-all-btn">
                Êü•ÁúãÂÖ®ÈÉ®
                <el-icon class="el-icon--right"><ArrowRight /></el-icon>
              </el-button>
            </div>
          </div>
          <div class="activity-container">
            <div v-if="loading.logs" class="loading-state">
              <el-skeleton :rows="3" animated />
            </div>
            <div v-else-if="recentLogs.length === 0" class="empty-state">
              <el-empty description="ÊöÇÊó†Â∑•‰ΩúËÆ∞ÂΩï">
                <el-button type="primary" @click="addWorkLog">Ê∑ªÂä†Â∑•‰ΩúËÆ∞ÂΩï</el-button>
              </el-empty>
            </div>
            <div v-else class="activity-timeline">
              <div
                v-for="log in recentLogs.slice(0, 5)"
                :key="log.ID"
                class="activity-item"
                @click="viewLogDetail(log.ID)"
              >
                <div class="activity-time">
                  <div class="time-dot" :class="getActivityType(log)"></div>
                  <div class="time-text">{{ formatTimeAgo(log.LogDate) }}</div>
                </div>
                <div class="activity-content">
                  <div class="activity-header">
                    <h4 class="activity-title">{{ log.PlanTitle || 'Áã¨Á´ãÂ∑•‰ΩúËÆ∞ÂΩï' }}</h4>
                    <div class="activity-meta">
                      <el-tag size="small" type="info">
                        <el-icon><Clock /></el-icon>
                        {{ log.WorkHours }}h
                      </el-tag>
                    </div>
                  </div>
                  <p class="activity-description">{{ truncateText(log.Content, 80) }}</p>
                  <div v-if="log.Progress !== null" class="activity-progress">
                    <el-progress
                      :percentage="log.Progress"
                      :stroke-width="3"
                      :show-text="false"
                      :color="getProgressColorGradient(log.Progress)"
                    />
                    <span class="progress-text">{{ log.Progress }}%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Âø´ÈÄüÁªüËÆ°Èù¢Êùø -->
    <div class="stats-panel">
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-icon completed">
            <el-icon><Check /></el-icon>
          </div>
          <div class="stat-info">
            <div class="stat-number">{{ dashboardData.planStats?.completedPlans || 0 }}</div>
            <div class="stat-label">Êú¨ÊúàÂÆåÊàê</div>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon in-progress">
            <el-icon><Loading /></el-icon>
          </div>
          <div class="stat-info">
            <div class="stat-number">{{ dashboardData.planStats?.inProgressPlans || 0 }}</div>
            <div class="stat-label">ËøõË°å‰∏≠</div>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon warning">
            <el-icon><Warning /></el-icon>
          </div>
          <div class="stat-info">
            <div class="stat-number">{{ dashboardData.planStats?.overduePlans || 0 }}</div>
            <div class="stat-label">ÈúÄÂÖ≥Ê≥®</div>
          </div>
        </div>
        <div class="stat-card">
          <div class="stat-icon total">
            <el-icon><DataBoard /></el-icon>
          </div>
          <div class="stat-info">
            <div class="stat-number">{{ totalWorkHours }}</div>
            <div class="stat-label">Êú¨ÊúàÂ∑•Êó∂</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, onUnmounted, computed, nextTick } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { useUserStore } from '@/store/user'
import {
  Sunny,
  Plus,
  EditPen,
  Refresh,
  DataBoard,
  ArrowDown,
  TrendCharts,
  Timer,
  Clock,
  ArrowRight,
  Folder,
  Calendar,
  Bell,
  Check,
  Loading,
  Warning
} from '@element-plus/icons-vue'
import * as echarts from 'echarts'
import api from '@/services/api'

// Ë∑ØÁî±ÂÆû‰æã
const router = useRouter()

// Áî®Êà∑Áä∂ÊÄÅÁÆ°ÁêÜ
const userStore = useUserStore()

// ÂìçÂ∫îÂºèÊï∞ÊçÆ
const dashboardData = ref({})
const todoList = ref([])
const recentLogs = ref([])
const selectedTimeRange = ref('month') // ÈªòËÆ§ÈÄâÊã©Êú¨Êúà
const todayWorkHours = ref(8.5)
const weeklyTargetRate = ref(85)
const totalWorkHours = ref(168)

// ÈÄöÁü•ÂÖ¨ÂëäÊï∞ÊçÆ
const noticeList = ref([
  {
    content: 'Á≥ªÁªüÂ∞Ü‰∫éÊú¨Âë®ÂÖ≠ËøõË°åÁª¥Êä§ÂçáÁ∫ßÔºåËØ∑ÊèêÂâç‰øùÂ≠òÂ∑•‰ΩúËøõÂ∫¶',
    time: '2024-01-20 09:00'
  },
  {
    content: 'Êñ∞ÁâàÊú¨Â∑•‰ΩúËÆ°ÂàíÁÆ°ÁêÜÁ≥ªÁªüÂ∑≤‰∏äÁ∫øÔºåÊ¨¢Ëøé‰ΩìÈ™åÊñ∞ÂäüËÉΩ',
    time: '2024-01-19 14:30'
  },
  {
    content: 'ËØ∑ÂêÑÈÉ®Èó®ÂèäÊó∂Êèê‰∫§Êú¨ÊúàÂ∑•‰ΩúÊÄªÁªìÊä•Âëä',
    time: '2024-01-18 16:45'
  },
  {
    content: 'Ë¥®ÈáèÁÆ°ÁêÜÂüπËÆ≠Â∞Ü‰∫é‰∏ãÂë®‰∏â‰∏æË°åÔºåËØ∑Áõ∏ÂÖ≥‰∫∫ÂëòÂáÜÊó∂ÂèÇÂä†',
    time: '2024-01-17 10:20'
  },
  {
    content: 'Âπ¥Â∫¶Â∑•‰ΩúËÆ°ÂàíÂà∂ÂÆö‰ºöËÆÆÂÆö‰∫é‰∏ãÂë®‰∫îÂè¨ÂºÄ',
    time: '2024-01-16 11:15'
  }
])

// EChartsÁõ∏ÂÖ≥ÂºïÁî®
const barChartRef = ref(null)
let barChart = null

// ÈÄöÁü•ÊªöÂä®Áõ∏ÂÖ≥ÂºïÁî®
const noticeScrollRef = ref(null)
let noticeScrollTimer = null

// Êó•ÂéÜÁõ∏ÂÖ≥Êï∞ÊçÆ
const currentDate = ref(new Date())

// Âä†ËΩΩÁä∂ÊÄÅ
const loading = reactive({
  dashboard: false,
  todos: false,
  logs: false
})

// Ê®°Êãü‰∏ÄÂë®ÊïàÁéáÊï∞ÊçÆ
const weeklyEfficiency = ref([
  { day: 'Âë®‰∏Ä', percentage: 85 },
  { day: 'Âë®‰∫å', percentage: 92 },
  { day: 'Âë®‰∏â', percentage: 78 },
  { day: 'Âë®Âõõ', percentage: 95 },
  { day: 'Âë®‰∫î', percentage: 88 },
  { day: 'Âë®ÂÖ≠', percentage: 60 },
  { day: 'Âë®Êó•', percentage: 45 }
])

// ËÆ°ÁÆóÂ±ûÊÄßÔºöÊï¥‰ΩìËøõÂ∫¶
const overallProgress = computed(() => {
  const stats = dashboardData.value.planStats
  if (!stats || !stats.totalPlans) return 0
  return Math.round((stats.completedPlans / stats.totalPlans) * 100)
})

/**
 * Ëé∑ÂèñÈóÆÂÄôËØ≠
 */
const getGreeting = () => {
  const hour = new Date().getHours()
  const greetings = {
    morning: ['Êó©‰∏äÂ•Ω üåÖ', 'Êñ∞ÁöÑ‰∏ÄÂ§©ÂºÄÂßã‰∫Ü üåû'],
    afternoon: ['‰∏ãÂçàÂ•Ω üå§Ô∏è', '‰∏ãÂçàÊó∂ÂÖâ üåª'],
    evening: ['Êôö‰∏äÂ•Ω üåô', 'Â§úÂπïÈôç‰∏¥ üåÉ']
  }
  
  let timeOfDay, messages
  if (hour >= 5 && hour < 12) {
    timeOfDay = 'morning'
    messages = greetings.morning
  } else if (hour >= 12 && hour < 18) {
    timeOfDay = 'afternoon' 
    messages = greetings.afternoon
  } else {
    timeOfDay = 'evening'
    messages = greetings.evening
  }
  
  // Ê†πÊçÆÊó•ÊúüÈÄâÊã©‰∏çÂêåÁöÑÈóÆÂÄôËØ≠ÔºåËÆ©ÊØèÂ§©ÈÉΩÊúâÊñ∞È≤úÊÑü
  const dayIndex = new Date().getDate() % messages.length
  return messages[dayIndex]
}

/**
 * Ëé∑ÂèñÂΩìÂâçÁî®Êà∑Âêç
 */
const getCurrentUser = () => {
  // ‰ªéÁî®Êà∑Áä∂ÊÄÅÁÆ°ÁêÜ‰∏≠Ëé∑ÂèñÁúüÂÆûÁî®Êà∑‰ø°ÊÅØ
  const user = userStore.user
  if (user && (user.realName || user.RealName)) {
    return user.realName || user.RealName
  }
  if (user && (user.username || user.Username)) {
    return user.username || user.Username
  }
  return 'Áî®Êà∑'
}

/**
 * Ëé∑ÂèñÂΩìÂâçÊó•ÊúüÔºà‰∏çÂåÖÂê´ÊòüÊúüÂá†Ôºâ
 */
const getCurrentDate = () => {
  const today = new Date()
  const options = { 
    year: 'numeric', 
    month: 'long', 
    day: 'numeric'
  }
  return today.toLocaleDateString('zh-CN', options)
}

/**
 * Ëé∑ÂèñÂΩìÂâçÊòüÊúüÂá†
 */
const getCurrentWeekday = () => {
  const today = new Date()
  const options = { 
    weekday: 'long'
  }
  return today.toLocaleDateString('zh-CN', options)
}

/**
 * Ëé∑ÂèñÂ∑•‰ΩúÂè∞Êï∞ÊçÆ
 */
const getDashboardData = async () => {
  try {
    loading.dashboard = true
    const response = await api.get('/work-plan/dashboard')
    if (response.data.success) {
      dashboardData.value = response.data.data
    }
  } catch (error) {
    console.error('Ëé∑ÂèñÂ∑•‰ΩúÂè∞Êï∞ÊçÆÂ§±Ë¥•:', error)
    // ‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆ
    dashboardData.value = {
      planStats: {
        totalPlans: 15,
        inProgressPlans: 6,
        completedPlans: 8,
        overduePlans: 1,
        avgProgress: 78.5,
        weeklyNew: 3,
        upcomingDeadlines: 2
      }
    }
  } finally {
    loading.dashboard = false
  }
}

/**
 * Ëé∑ÂèñÂæÖÂäû‰∫ãÈ°πÂàóË°®
 */
const getTodoList = async () => {
  try {
    loading.todos = true
    const response = await api.get('/work-plan/dashboard/todos', {
      params: { limit: 10 }
    })
    if (response.data.success) {
      todoList.value = response.data.data
    }
  } catch (error) {
    console.error('Ëé∑ÂèñÂæÖÂäû‰∫ãÈ°πÂ§±Ë¥•:', error)
    // ‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆ
    todoList.value = [
      {
        ID: 1,
        Title: 'ÂÆåÊàêÁ≥ªÁªüÊû∂ÊûÑËÆæËÆ°ÊñáÊ°£',
        Priority: 'high',
        WorkTypeName: 'Á≥ªÁªüËÆæËÆ°',
        EndDate: '2024-01-25',
        DaysRemaining: 2,
        Progress: 75
      },
      {
        ID: 2,
        Title: 'Áî®Êà∑ÁïåÈù¢ÂéüÂûãËÆæËÆ°',
        Priority: 'medium',
        WorkTypeName: 'UIËÆæËÆ°',
        EndDate: '2024-01-28',
        DaysRemaining: 5,
        Progress: 45
      },
      {
        ID: 3,
        Title: 'Êï∞ÊçÆÂ∫ìÊÄßËÉΩ‰ºòÂåñ',
        Priority: 'high',
        WorkTypeName: 'Êï∞ÊçÆÂ∫ì',
        EndDate: '2024-01-22',
        DaysRemaining: -1,
        Progress: 90
      }
    ]
  } finally {
    loading.todos = false
  }
}

/**
 * Ëé∑ÂèñÊúÄËøëÂ∑•‰ΩúÊó•Âøó
 */
const getRecentLogs = async () => {
  try {
    loading.logs = true
    const response = await api.get('/work-plan/dashboard/recent-logs', {
      params: { limit: 8 }
    })
    if (response.data.success) {
      recentLogs.value = response.data.data
    }
  } catch (error) {
    console.error('Ëé∑ÂèñÊúÄËøëÂ∑•‰ΩúÊó•ÂøóÂ§±Ë¥•:', error)
    // ‰ΩøÁî®Ê®°ÊãüÊï∞ÊçÆ
    recentLogs.value = [
      {
        ID: 1,
        PlanTitle: 'Á≥ªÁªüÊû∂ÊûÑËÆæËÆ°',
        Content: 'ÂÆåÊàê‰∫ÜÊ†∏ÂøÉÊ®°ÂùóÁöÑÊû∂ÊûÑËÆæËÆ°ÔºåÂåÖÊã¨Áî®Êà∑ÁÆ°ÁêÜ„ÄÅÊùÉÈôêÊéßÂà∂ÂíåÊï∞ÊçÆÊµÅËÆæËÆ°',
        LogDate: '2024-01-20 14:30:00',
        WorkHours: 4,
        Progress: 75
      },
      {
        ID: 2,
        PlanTitle: 'UIÁïåÈù¢ËÆæËÆ°',
        Content: 'ËÆæËÆ°‰∫Ü‰∏ªË¶ÅÈ°µÈù¢ÁöÑ‰∫§‰∫íÂéüÂûãÔºåÂåÖÊã¨ÁôªÂΩïÈ°µÈù¢„ÄÅ‰ª™Ë°®ÁõòÂíåÁî®Êà∑ÁÆ°ÁêÜÈ°µÈù¢',
        LogDate: '2024-01-20 10:15:00',
        WorkHours: 3,
        Progress: 45
      }
    ]
  } finally {
    loading.logs = false
  }
}

/**
 * ÂàùÂßãÂåñEChartsÊü±Áä∂Âõæ
 */
const initBarChart = () => {
  if (!barChartRef.value) return
  
  // ÈîÄÊØÅÂ∑≤Â≠òÂú®ÁöÑÂõæË°®ÂÆû‰æã
  if (barChart) {
    barChart.dispose()
  }
  
  // ÂàõÂª∫Êñ∞ÁöÑÂõæË°®ÂÆû‰æã
  barChart = echarts.init(barChartRef.value)
  
  // Êõ¥Êñ∞ÂõæË°®Êï∞ÊçÆ
  updateBarChart()
}

/**
 * Êõ¥Êñ∞EChartsÊü±Áä∂ÂõæÊï∞ÊçÆ
 */
const updateBarChart = () => {
  if (!barChart || !dashboardData.value.planStats) return
  
  const stats = dashboardData.value.planStats
  const data = [
    {
      name: 'ËøõË°å‰∏≠',
      value: stats.inProgressPlans || 0,
      itemStyle: {
        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
          { offset: 0, color: '#4A90E2' },
          { offset: 1, color: '#8EC1F7' }
        ])
      }
    },
    {
       name: 'Â∑≤ÂÆåÊàê',
       value: stats.completedPlans || 0,
       itemStyle: {
         color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
           { offset: 0, color: '#67C23A' },
           { offset: 1, color: '#95D475' }
         ])
       }
     },
    {
      name: 'Â∑≤ÈÄæÊúü',
      value: stats.overduePlans || 0,
      itemStyle: {
        color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [
          { offset: 0, color: '#D0021B' },
          { offset: 1, color: '#F78B9B' }
        ])
      }
    }
  ]
  
  const option = {
    grid: {
      left: '10%',
      right: '10%',
      top: '20%',
      bottom: '25%'
    },
    xAxis: {
      type: 'category',
      data: data.map(item => item.name),
      axisLine: {
        show: true,
        lineStyle: {
          color: '#e0e0e0'
        }
      },
      axisTick: {
        show: false
      },
      axisLabel: {
        color: '#666',
        fontSize: 12
      }
    },
    yAxis: {
      type: 'value',
      show: false
    },
    series: [{
      type: 'bar',
      data: data,
      barWidth: '40%',
      label: {
        show: true,
        position: 'top',
        formatter: '{c}È°π',
        color: '#333',
        fontFamily: 'Microsoft YaHei, Arial, sans-serif',
        fontSize: 12,
        fontWeight: 'normal'
      },
      emphasis: {
        itemStyle: {
          shadowBlur: 10,
          shadowColor: 'rgba(0, 0, 0, 0.3)'
        }
      }
    }]
  }
  
  barChart.setOption(option)
}

/**
 * Âà∑Êñ∞ÊâÄÊúâÊï∞ÊçÆ
 */
const refreshData = async () => {
  await Promise.all([
    getDashboardData(),
    getTodoList(),
    getRecentLogs()
  ])
  
  // Êï∞ÊçÆÊõ¥Êñ∞ÂêéÂà∑Êñ∞ÂõæË°®
  await nextTick()
  updateBarChart()
  
  ElMessage.success('Êï∞ÊçÆÂà∑Êñ∞ÊàêÂäü')
}

/**
 * Â§ÑÁêÜÊó∂Èó¥ËåÉÂõ¥ÂèòÂåñ
 */
const handleTimeRangeChange = (value) => {
  selectedTimeRange.value = value
  // Ê†πÊçÆÊó∂Èó¥ËåÉÂõ¥ÈáçÊñ∞Ëé∑ÂèñÊï∞ÊçÆ
  refreshDataByTimeRange()
}

/**
 * Ê†πÊçÆÊó∂Èó¥ËåÉÂõ¥Âà∑Êñ∞Êï∞ÊçÆ
 */
const refreshDataByTimeRange = async () => {
  try {
    loading.dashboard = true
    // ËøôÈáåÂèØ‰ª•Ê†πÊçÆselectedTimeRange.valueË∞ÉÁî®‰∏çÂêåÁöÑAPI
    await Promise.all([
      getDashboardData(),
      getTodoList(),
      getRecentLogs()
    ])
  } catch (error) {
    console.error('Âà∑Êñ∞Êï∞ÊçÆÂ§±Ë¥•:', error)
  } finally {
    loading.dashboard = false
  }
}



/**
 * ËÆ°ÁÆóÂúÜÁéØÂõæÁôæÂàÜÊØî
 */
const getPercentage = (type) => {
  const stats = dashboardData.value.planStats
  if (!stats || !stats.totalPlans) return 0
  
  let value = 0
  switch (type) {
    case 'inProgress':
      value = stats.inProgressPlans || 0
      break
    case 'completed':
      value = stats.completedPlans || 0
      break
    case 'overdue':
      value = stats.overduePlans || 0
      break
  }
  
  return Math.round((value / stats.totalPlans) * 100)
}

/**
 * Ëé∑ÂèñËøõÂ∫¶Êù°Ê∏êÂèòËâ≤
 */
const getProgressColorGradient = (percentage) => {
  if (percentage >= 80) {
    return [{ color: '#67c23a', percentage: 100 }]
  } else if (percentage >= 60) {
    return [{ color: '#e6a23c', percentage: 100 }]
  } else if (percentage >= 40) {
    return [{ color: '#f56c6c', percentage: 100 }]
  } else {
    return [{ color: '#909399', percentage: 100 }]
  }
}

/**
 * Ê†ºÂºèÂåñÁ¥ßÊÄ•Á®ãÂ∫¶
 */
const formatUrgency = (daysRemaining) => {
  if (daysRemaining < 0) return 'Â∑≤ÈÄæÊúü'
  if (daysRemaining === 0) return '‰ªäÂ§©Âà∞Êúü'
  if (daysRemaining <= 3) return 'Á¥ßÊÄ•'
  if (daysRemaining <= 7) return 'Âç≥Â∞ÜÂà∞Êúü'
  return 'Ê≠£Â∏∏'
}

/**
 * Ëé∑ÂèñÁ¥ßÊÄ•Á®ãÂ∫¶Á±ªÂûã
 */
const getUrgencyType = (daysRemaining) => {
  if (daysRemaining < 0) return 'danger'
  if (daysRemaining <= 3) return 'warning'
  return 'info'
}

/**
 * Ê†ºÂºèÂåñÊó•Êúü
 */
const formatDate = (dateStr) => {
  const date = new Date(dateStr)
  return date.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' })
}

/**
 * Ê†ºÂºèÂåñÊó∂Èó¥Ë∑ùÁ¶ª
 */
const formatTimeAgo = (dateStr) => {
  const date = new Date(dateStr)
  const now = new Date()
  const diff = now - date
  const hours = Math.floor(diff / (1000 * 60 * 60))
  const days = Math.floor(hours / 24)
  
  if (days > 0) return `${days}Â§©Ââç`
  if (hours > 0) return `${hours}Â∞èÊó∂Ââç`
  return 'ÂàöÂàö'
}

/**
 * Âà§Êñ≠ÊòØÂê¶‰∏∫‰ªäÂ§©
 */
const isToday = (dateStr) => {
  const today = new Date()
  const date = new Date(dateStr)
  return today.toDateString() === date.toDateString()
}

/**
 * Ëé∑ÂèñÊ¥ªÂä®Á±ªÂûã
 */
const getActivityType = (log) => {
  if (log.Progress >= 100) return 'completed'
  if (log.Issues) return 'warning'
  return 'normal'
}

/**
 * Êà™Êñ≠ÊñáÊú¨
 */
const truncateText = (text, maxLength) => {
  if (!text) return ''
  return text.length > maxLength ? text.substring(0, maxLength) + '...' : text
}

/**
 * ÂàõÂª∫Êñ∞ËÆ°Âàí
 */
const createNewPlan = () => {
  router.push('/admin/work-plan/plans/create')
}

/**
 * Ê∑ªÂä†Â∑•‰ΩúËÆ∞ÂΩï
 */
const addWorkLog = () => {
  router.push('/admin/work-plan/logs/create')
}

/**
 * Êü•ÁúãËÆ°ÂàíËØ¶ÊÉÖ
 */
const viewPlanDetail = (planId) => {
  router.push(`/admin/work-plan/plans/${planId}`)
}

/**
 * Êü•ÁúãÊó•ÂøóËØ¶ÊÉÖ
 */
const viewLogDetail = (logId) => {
  router.push(`/admin/work-plan/logs/${logId}`)
}

/**
 * Êü•ÁúãÊâÄÊúâÂæÖÂäû‰∫ãÈ°π
 */
const viewAllTodos = () => {
  router.push('/admin/work-plan/plans?status=pending,in_progress')
}

/**
 * Êü•ÁúãÊâÄÊúâÂ∑•‰ΩúÊó•Âøó
 */
const viewAllLogs = () => {
  router.push('/admin/work-plan/logs')
}

/**
 * ÂàùÂßãÂåñÈÄöÁü•Ëá™Âä®ÊªöÂä®ÔºàÊ∞¥Âπ≥ÂêëÂ∑¶ÊªöÂä®Ôºâ
 */
const initNoticeAutoScroll = () => {
  if (!noticeScrollRef.value) return
  
  const scrollContainer = noticeScrollRef.value
  let scrollLeft = 0
  const scrollStep = 1 // ÊØèÊ¨°ÊªöÂä®ÁöÑÂÉèÁ¥†
  const scrollDelay = 30 // ÊªöÂä®Èó¥ÈöîÔºàÊØ´ÁßíÔºâ
  const pauseTime = 1000 // ÊªöÂä®Âà∞Âè≥Á´ØÂêéÁöÑÊöÇÂÅúÊó∂Èó¥ÔºàÊØ´ÁßíÔºâ
  
  const autoScroll = () => {
    if (!scrollContainer) return
    
    const maxScrollLeft = scrollContainer.scrollWidth - scrollContainer.clientWidth
    
    if (maxScrollLeft <= 0) {
      // ÂÜÖÂÆπ‰∏çË∂≥‰ª•ÊªöÂä®
      return
    }
    
    if (scrollLeft >= maxScrollLeft) {
      // ÊªöÂä®Âà∞Âè≥Á´ØÔºåÁü≠ÊöÇÊöÇÂÅúÂêéÂπ≥ÊªëÈáçÁΩÆÂà∞Â∑¶Á´Ø
      setTimeout(() => {
        scrollLeft = 0
        scrollContainer.scrollLeft = 0
      }, pauseTime)
    } else {
      scrollLeft += scrollStep
      scrollContainer.scrollLeft = scrollLeft
    }
  }
  
  // ÂêØÂä®Ëá™Âä®ÊªöÂä®
  noticeScrollTimer = setInterval(autoScroll, scrollDelay)
  
  // Èº†Ê†áÊÇ¨ÂÅúÊó∂ÊöÇÂÅúÊªöÂä®
  scrollContainer.addEventListener('mouseenter', () => {
    if (noticeScrollTimer) {
      clearInterval(noticeScrollTimer)
      noticeScrollTimer = null
    }
  })
  
  // Èº†Ê†áÁ¶ªÂºÄÊó∂ÊÅ¢Â§çÊªöÂä®
  scrollContainer.addEventListener('mouseleave', () => {
    if (!noticeScrollTimer) {
      noticeScrollTimer = setInterval(autoScroll, scrollDelay)
    }
  })
}

/**
 * Ê∏ÖÁêÜËá™Âä®ÊªöÂä®ÂÆöÊó∂Âô®
 */
const clearNoticeAutoScroll = () => {
  if (noticeScrollTimer) {
    clearInterval(noticeScrollTimer)
    noticeScrollTimer = null
  }
}

// ÁªÑ‰ª∂ÊåÇËΩΩÊó∂Ëé∑ÂèñÊï∞ÊçÆ
onMounted(async () => {
  // Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
  try {
    await userStore.fetchProfile()
  } catch (error) {
    console.error('Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•:', error)
  }
  
  await refreshData()
  // Á°Æ‰øùDOMÊ∏≤ÊüìÂÆåÊàêÂêéÂàùÂßãÂåñÂõæË°®ÂíåËá™Âä®ÊªöÂä®
  await nextTick()
  initBarChart()
  initNoticeAutoScroll()
})

// ÁªÑ‰ª∂Âç∏ËΩΩÊó∂Ê∏ÖÁêÜÂÆöÊó∂Âô®
onUnmounted(() => {
  clearNoticeAutoScroll()
})
</script>

<style scoped>
.modern-dashboard {
  min-height: 100vh;
  background: #fff;
  padding: 20px;
  font-family: 'Tahoma', Arial, sans-serif;
}

/* È°µÈù¢Â§¥ÈÉ® */
.page-header {
  background: #f5f5f5;
  border-radius: 20px;
  padding: 16px 24px;
  margin-bottom: 24px;
  color: #333;
  position: relative;
  overflow: hidden;
  border: 1px solid #e0e0e0;
}

.page-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="%23ffffff" opacity="0.1"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>') repeat;
  pointer-events: none;
}

.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  z-index: 1;
}

.header-left {
  flex: 1;
}

.page-title {
  display: flex;
  align-items: center;
  gap: 12px;
  margin: 0 0 6px 0;
  font-size: 24px;
  font-weight: 700;
  color: #333;
}

.title-icon {
  font-size: 28px;
  color: #f39c12;
}

/* ÁæéÂåñÁöÑÊ¨¢ËøéËØçÊ†∑Âºè */
.welcome-message {
  margin: 0;
  animation: fadeInUp 0.8s ease-out;
}
 
.welcome-line {
  margin: 0;
  display: flex;
  align-items: center;
  gap: 24px;
  font-size: 16px;
  font-weight: 500;
}

.greeting-section {
  display: flex;
  align-items: center;
  gap: 4px;
}

.greeting-emoji {
  font-size: 20px;
  animation: bounce 2s infinite;
  display: inline-block;
}

.greeting-words {
  color: #409eff;
  font-weight: normal;
  text-shadow: 0 1px 2px rgba(64, 158, 255, 0.1);
}

.user-name {
  color: #e6a23c;
  font-weight: normal;
  background: linear-gradient(45deg, #e6a23c, #f39c12);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.exclamation {
  color: #f56c6c;
  font-weight: normal;
  animation: pulse 1.5s ease-in-out infinite;
}

.date-section {
  color: #666;
  font-size: 13px;
  font-weight: 400;
  display: flex;
  align-items: center;
  gap: 6px;
  opacity: 0.9;
}

.calendar-icon {
  color: #909399;
  font-size: 14px;
}

.weekday-tag {
  margin-left: 8px;
  font-weight: 500;
  border-radius: 12px;
  animation: fadeInUp 0.6s ease-out;
}

/* Âä®ÁîªÊïàÊûú */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-3px);
  }
  60% {
    transform: translateY(-2px);
  }
}

@keyframes pulse {
  0% {
    transform: scale(1);
  }
  50% {
    transform: scale(1.1);
  }
  100% {
    transform: scale(1);
  }
}

.header-right {
  display: flex;
  align-items: center;
  gap: 24px;
}

.time-filter {
  display: flex;
  align-items: center;
  gap: 8px;
}

.filter-label {
  color: #666;
  font-size: 14px;
  font-weight: 500;
}

.time-select {
  width: 120px;
}

.quick-actions {
  display: flex;
  gap: 12px;
}

.action-btn {
  border-radius: 12px;
  padding: 10px 16px;
  font-weight: 500;
  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.action-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
}

/* È°∂ÈÉ®ÁªüËÆ°Êï∞ÊçÆÂ±ïÁ§∫Ë°å */
.stats-row {
  margin-bottom: 30px;
  max-height: 300px; /* ‰ª•Êó•ÂéÜÊ®°ÂùóÈ´òÂ∫¶‰∏∫Âü∫ÂáÜËÆæÁΩÆÁ¨¨‰∫åË°åÊúÄÂ§ßÈ´òÂ∫¶ */
  overflow: hidden; /* Èò≤Ê≠¢ÂÜÖÂÆπË∂ÖÂá∫ÂÆπÂô®Â∫ïÈÉ® */
}

.stat-card {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  padding: 16px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
  transition: all 0.3s ease;
  height: 180px;
  display: flex;
  flex-direction: column;
}

.stat-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15);
}

.card-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.card-title {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 18px;
  font-weight: 600;
  color: #2c3e50;
}

.card-icon {
  font-size: 20px;
  color: #667eea;
}

.filter-btn {
  color: #667eea;
  font-weight: 500;
}

/* Â∑¶Âç°ÁâáÔºöÂÆåÊàêÊÉÖÂÜµ */
.left-card {
  width: 100%;
  overflow: hidden;
}

.left-card .completion-grid {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  padding: 0 0 10px 0;
}

.left-card .completion-grid {
  display: flex;
  flex-direction: column;
  gap: 12px;
  width: 100%;
  flex: 1;
  justify-content: space-around;
}

.completion-item {
  display: flex;
  align-items: center;
  gap: 12px;
  padding: 4px 0;
  white-space: nowrap;
  overflow: hidden;
}

.completion-label {
  font-size: 13px;
  color: #7f8c8d;
  font-weight: 500;
  min-width: 70px;
  flex-shrink: 0;
  white-space: nowrap;
}

.completion-progress {
  display: flex;
  align-items: center;
  gap: 8px;
  flex: 1;
  min-width: 0;
}

.completion-progress .el-progress {
  flex: 1;
  min-width: 0;
}

.completion-progress .progress-text {
  font-size: 13px;
  color: #2c3e50;
  font-weight: normal;
  min-width: 35px;
  flex-shrink: 0;
  white-space: nowrap;
}

.progress-text-blue {
  color: #409eff !important;
}

.progress-text-green {
  color: #67c23a !important;
}

.progress-text-orange {
  color: #e6a23c !important;
}

.progress-text-red {
  color: #f56c6c !important;
}

/* ‰∏≠ÈÉ®Âç°ÁâáÔºöËÆ°ÂàíÁªüËÆ°ÂíåÊü±ÂΩ¢Âõæ */
.middle-card {
  width: 100%;
  overflow: hidden;
  flex: 1;
  display: flex;
  flex-direction: column;
}

.middle-card .middle-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  gap: 8px;
  width: 100%;
  padding: 0 0 20px 0;
}

.stats-text {
  display: flex;
  justify-content: space-around;
  gap: 20px;
  white-space: nowrap;
}

.stats-tags {
  margin-bottom: 4px;
  white-space: nowrap;
  overflow: hidden;
  min-height: 32px;
}

.text-center {
  text-align: center;
}

.stat-tag {
  padding: 3px 10px;
  border-radius: 6px;
  font-size: 11px;
  font-weight: 700;
  color: white;
  white-space: nowrap;
  flex-shrink: 0;
  line-height: 1.4;
  min-height: 20px;
  display: inline-block;
}

.stat-tag-total {
  background-color: #ff6b6b;
}

.stat-tag-completed {
  background-color: #51cf66;
}

.stat-tag-value {
  font-size: 13px;
  color: #2c3e50;
  font-weight: 600;
  white-space: nowrap;
  flex-shrink: 0;
  margin-left: 6px;
}

.stat-text-item {
  text-align: center;
}

.stat-label {
  display: block;
  font-size: 12px;
  color: #7f8c8d;
  font-weight: 500;
  margin-bottom: 4px;
}

.stat-number {
  font-size: 24px;
  font-weight: 700;
  color: #2c3e50;
}

.stat-number.completed { color: #27ae60; }

.bar-chart {
  display: flex;
  flex-direction: column;
  gap: 8px;
  width: 100%;
  overflow: hidden;
}

.echarts-container {
  width: 100%;
  height: 120px;
  min-width: 0;
}

/* Âè≥Âç°ÁâáÔºöÂúÜÁéØÂõæ */
.right-card {
  width: 100%;
  overflow: hidden;
  flex: 1;
  display: flex;
  flex-direction: column;
}

.right-card .pie-charts {
  flex: 1;
  display: flex;
  justify-content: space-around;
  align-items: center;
  gap: 12px;
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
  padding: 0 0 20px 0;
}

.pie-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 6px;
  flex: 1;
  min-width: 0;
}

.pie-center {
  text-align: center;
}

.pie-value {
  font-size: 11px;
  color: #2c3e50;
  font-weight: 600;
  white-space: nowrap;
}

.pie-label {
  font-size: 12px;
  color: #7f8c8d;
  font-weight: 500;
  text-align: center;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* ÊâÄÊúâÂúÜÁéØËøõÂ∫¶Êù°ËÉåÊôØËâ≤ËÆæÁΩÆ */
.pie-charts .pie-item :deep(.el-progress-circle__track) {
  stroke: #EBEEF5;
}



/* ‰∏ªË¶ÅÂÜÖÂÆπÂå∫Âüü */
.main-content {
  margin-bottom: 30px;
}

.content-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.content-section {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.section-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding-bottom: 16px;
  border-bottom: 2px solid #ecf0f1;
}

.section-title {
  display: flex;
  align-items: center;
  gap: 8px;
  margin: 0;
  font-size: 18px;
  font-weight: 600;
  color: #2c3e50;
}

.todo-badge {
  margin-left: 8px;
}

.view-all-btn {
  color: #667eea;
  font-weight: 500;
}

/* ÂæÖÂäû‰∫ãÈ°π */
.todo-container {
  max-height: 400px;
  overflow-y: auto;
}

.todo-list {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.todo-item {
  display: flex;
  align-items: flex-start;
  gap: 12px;
  padding: 16px;
  background: #f8f9fa;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s ease;
  border-left: 4px solid transparent;
}

.todo-item:hover {
  background: #e9ecef;
  transform: translateX(4px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.todo-priority {
  width: 4px;
  height: 40px;
  border-radius: 2px;
  flex-shrink: 0;
}

.priority-high { background: #e74c3c; }
.priority-medium { background: #f39c12; }
.priority-low { background: #27ae60; }

.todo-main {
  flex: 1;
  min-width: 0;
}

.todo-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 8px;
  gap: 12px;
}

.todo-title {
  margin: 0;
  font-size: 14px;
  font-weight: 600;
  color: #2c3e50;
  line-height: 1.4;
}

.urgency-tag {
  flex-shrink: 0;
}

.todo-meta {
  display: flex;
  gap: 16px;
  margin-bottom: 12px;
  font-size: 12px;
  color: #7f8c8d;
}

.todo-type,
.todo-deadline {
  display: flex;
  align-items: center;
  gap: 4px;
}

.todo-progress {
  display: flex;
  align-items: center;
  gap: 8px;
}

.progress-text {
  font-size: 12px;
  color: #7f8c8d;
  font-weight: 500;
  min-width: 35px;
}

/* Ê¥ªÂä®Êó∂Èó¥Á∫ø */
.activity-container {
  max-height: 400px;
  overflow-y: auto;
}

.activity-timeline {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.activity-item {
  display: flex;
  gap: 16px;
  padding: 16px;
  background: #f8f9fa;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.activity-item:hover {
  background: #e9ecef;
  transform: translateX(4px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.activity-time {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  flex-shrink: 0;
}

.time-dot {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: #bdc3c7;
}

.time-dot.completed { background: #27ae60; }
.time-dot.warning { background: #f39c12; }
.time-dot.normal { background: #3498db; }

.time-text {
  font-size: 10px;
  color: #7f8c8d;
  text-align: center;
  white-space: nowrap;
}

.activity-content {
  flex: 1;
  min-width: 0;
}

.activity-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 8px;
  gap: 12px;
}

.activity-title {
  margin: 0;
  font-size: 14px;
  font-weight: 600;
  color: #2c3e50;
  line-height: 1.4;
}

.activity-meta {
  flex-shrink: 0;
}

.activity-description {
  margin: 0 0 12px 0;
  font-size: 13px;
  color: #7f8c8d;
  line-height: 1.4;
}

.activity-progress {
  display: flex;
  align-items: center;
  gap: 8px;
}

/* ÁªüËÆ°Èù¢Êùø */
.stats-panel {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  padding: 24px;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 20px;
}

.stat-card {
  display: flex;
  align-items: center;
  gap: 16px;
  padding: 20px;
  background: #f8f9fa;
  border-radius: 12px;
  transition: all 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.stat-icon {
  width: 48px;
  height: 48px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 20px;
  color: white;
}

.stat-icon.completed { background: #27ae60; }
.stat-icon.in-progress { background: #3498db; }
.stat-icon.warning { background: #f39c12; }
.stat-icon.total { background: #9b59b6; }

.stat-info {
  flex: 1;
}

.stat-number {
  font-size: 20px;
  font-weight: 700;
  color: #2c3e50;
  margin-bottom: 4px;
}

.stat-label {
  font-size: 12px;
  color: #7f8c8d;
  font-weight: 500;
}

/* Âä†ËΩΩÂíåÁ©∫Áä∂ÊÄÅ */
.loading-state,
.empty-state {
  padding: 40px 20px;
  text-align: center;
}

/* ÂìçÂ∫îÂºèËÆæËÆ° */
@media (max-width: 1200px) {
  .pie-charts {
    flex-direction: column;
    align-items: center;
  }
}

@media (max-width: 768px) {
  .modern-dashboard {
    padding: 15px;
  }
  
  .header-content {
    flex-direction: column;
    gap: 16px;
    text-align: center;
  }
  
  .header-right {
    flex-direction: column;
    gap: 16px;
  }
  
  .content-grid {
    display: flex;
    flex-direction: column;
  }
  
  .bars-container {
    height: 60px;
  }
  
  .pie-charts {
    flex-direction: column;
    gap: 12px;
  }
}

@media (max-width: 480px) {
  .page-title {
    font-size: 24px;
  }
  
  .quick-actions {
    width: 100%;
    justify-content: center;
  }
  
  .stats-text {
    flex-direction: column;
    gap: 12px;
  }
  
  .bars-container {
    height: 50px;
  }
}

/* ÊªöÂä®Êù°Ê†∑Âºè */
.todo-container::-webkit-scrollbar,
.activity-container::-webkit-scrollbar {
  width: 6px;
}

.todo-container::-webkit-scrollbar-track,
.activity-container::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

/* Êó•ÂéÜÂç°ÁâáÊ†∑Âºè */
.calendar-card {
  height: 100%;
  max-height: 300px;
  display: flex;
  flex-direction: column;
}

.calendar-content {
  flex: 1;
  padding: 4px;
  overflow: hidden;
}

.dashboard-calendar {
  height: 100%;
}

.dashboard-calendar :deep(.el-calendar__header) {
  padding: 8px 0;
  border-bottom: 1px solid #ebeef5;
  text-align: center;
}

.dashboard-calendar :deep(.el-calendar__title) {
  font-size: 14px;
  font-weight: 600;
  color: #2c3e50;
  text-align: center;
  margin: 0 auto;
}

.dashboard-calendar :deep(.el-calendar__button-group) {
  display: none;
}

.dashboard-calendar :deep(.el-calendar__body) {
  padding: 8px 0;
}

.dashboard-calendar :deep(.el-calendar-table) {
  font-size: 12px;
}

.dashboard-calendar :deep(.el-calendar-table thead th) {
  padding: 0;
  font-weight: 600;
  color: white;
  background-color: #409EFF;
  border-bottom: 1px solid #ebeef5;
  width: 24px;
  height: 24px;
  text-align: center;
  vertical-align: middle;
  line-height: 24px;
}

.dashboard-calendar :deep(.el-calendar-table .el-calendar-day) {
  padding: 0;
  max-height: 24px;
  width: 24px;
  height: 24px;
  text-align: center;
  vertical-align: middle;
  display: flex;
  align-items: center;
  justify-content: center;
}

.dashboard-calendar :deep(.el-calendar-table td) {
  width: 24px;
  height: 24px;
  padding: 0;
  text-align: center;
  vertical-align: middle;
  border: none;
}

.calendar-day {
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 2px;
  font-size: 11px;
  transition: all 0.2s ease;
  margin: auto;
}

.calendar-day.is-today {
  background: #F56C6C;
  color: white;
  font-weight: 600;
}

/* ÊòüÊúüÊó•ÁöÑÊó•ÊúüÂ≠ó‰ΩìÈ¢úËâ≤‰∏∫Á∫¢Ëâ≤ */
.dashboard-calendar :deep(.el-calendar-table td:first-child .calendar-day) {
  color: #f56c6c;
}

.dashboard-calendar :deep(.el-calendar-table td:first-child .calendar-day.is-today) {
  background: #F56C6C;
  color: white;
}

/* ‰∏ä‰∏ãÈÉ®ÂàÜÂ∏ÉÂ±ÄÊ†∑Âºè */
.upper-section {
  margin-bottom: 20px;
}

.lower-section {
  margin-top: 20px;
  height: 160px; /* Âõ∫ÂÆöÈ´òÂ∫¶ÔºåÈò≤Ê≠¢Ë∂ÖÂá∫ */
}

/* ÈÄöÁü•ÂÖ¨ÂëäÊ®°ÂùóÊ†∑Âºè */
.notice-card {
  height: 100%;
  max-height: 280px; /* ‰∏éÊó•ÂéÜÊ®°ÂùóÈ´òÂ∫¶‰øùÊåÅ‰∏ÄËá¥ÔºåÁïô20pxËæπË∑ù */
  display: flex;
  flex-direction: column;
  overflow: hidden; /* Èò≤Ê≠¢ÂÜÖÂÆπÊ∫¢Âá∫ */
}

.notice-card .el-row {
  height: 100%;
  margin: 0;
}

.notice-card .el-col {
  height: 100%;
}

.notice-header {
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  border-right: 1px solid #ebeef5;
  padding: 16px 12px;
  background: #ffffff;
  box-shadow: 0 0 8px rgba(0, 0, 0, 0.05);
  min-height: 120px;
}

.notice-title {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 8px;
  margin: 0;
  font-size: 15px;
  font-weight: 700;
  color: #1a1a1a;
  text-align: center;
  line-height: 1.3;
}

.notice-title .el-icon {
  color: #409eff;
  font-size: 24px;
}

.notice-title span {
  white-space: nowrap;
  color: #1a1a1a;
}

.notice-content {
  height: 100%;
  overflow: hidden;
  padding: 12px 8px;
  display: flex;
  align-items: center;
}

.notice-scroll {
  height: 100%;
  overflow-x: auto;
  overflow-y: hidden;
  white-space: nowrap;
  display: flex;
  align-items: center;
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
}

.notice-item {
  display: inline-flex;
  align-items: center;
  gap: 12px;
  padding: 12px 20px;
  margin-right: 24px;
  background: transparent;
  transition: all 0.2s ease;
  white-space: nowrap;
  flex-shrink: 0;
}

.notice-item:hover {
  background: rgba(64, 158, 255, 0.1);
  border-radius: 6px;
}

.notice-dot {
  width: 8px;
  height: 8px;
  background: #409eff;
  border-radius: 50%;
  flex-shrink: 0;
}

.notice-text {
  flex: 1;
  font-size: 15px;
  color: #2c3e50;
  line-height: 1.5;
  font-weight: 500;
}

.notice-time {
  font-size: 13px;
  color: #909399;
  white-space: nowrap;
  flex-shrink: 0;
}

/* ÈöêËóèÊ∞¥Âπ≥ÊªöÂä®Êù°‰ª•Ëé∑ÂæóÊõ¥Â•ΩÁöÑËßÜËßâÊïàÊûú */
.notice-scroll::-webkit-scrollbar {
  display: none; /* Chrome, Safari and Opera */
}

.dashboard-calendar :deep(.el-calendar-table .el-calendar-day:hover .calendar-day) {
  background: #ecf5ff;
  color: #409eff;
}

.dashboard-calendar :deep(.el-calendar-table .el-calendar-day:hover .calendar-day.is-today) {
  background: #e85a5a;
  color: white;
}

.todo-container::-webkit-scrollbar-thumb,
.activity-container::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 3px;
}

.todo-container::-webkit-scrollbar-thumb:hover,
.activity-container::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}
</style>